PROBLEM STATEMENT 

A level-order traversal, also known as a breadth-first search, visits each level of a tree's nodes from left to right, top to bottom. You are given a pointer, root, pointing to the root of a binary search tree. Complete the levelOrder function provided in your editor so that it prints the level- order traversal of the binary search tree.

SOLUTION

import sys

class Node:
    def __init__(self,data):
        self.right=self.left=None
        self.data = data
class Solution:
    def insert(self,root,data):
        if root==None:
            return Node(data)
        else:
            if data<=root.data:
                cur=self.insert(root.left,data)
                root.left=cur
            else:
                cur=self.insert(root.right,data)
                root.right=cur
        return root

    def levelOrder(self,root):
        #Write your code here
        if not root:
            return
        
        queue = deque([root])  # Initialize the queue with the root node
        
        while queue:
            current_node = queue.popleft()  # Dequeue the front node
            print(current_node.data, end=' ')  # Print the current node's data
            
            # Enqueue left child
            if current_node.left:
                queue.append(current_node.left)
            
            # Enqueue right child
            if current_node.right:
                queue.append(current_node.right)
from collections import deque
T=int(input())
myTree=Solution()
root=None
for i in range(T):
    data=int(input())
    root=myTree.insert(root,data)
myTree.levelOrder(root)
